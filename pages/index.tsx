import React, { useEffect, useState } from 'react'
import { Web3ReactProvider, useWeb3React } from '@web3-react/core'
import { ethers } from 'ethers'
import { Web3Provider } from '@ethersproject/providers'
import Head from 'next/head'
import styles from '../styles/Home.module.css'
import SubPortal from '../components/SubPortal'

const _subXContractAddress = '0xd20AD5394D40a5aaFFD30A274d2e189dcDd07Ace';

const abiSubx = [
  //Return balance of holders account
  "function balanceOf(address holder) view external returns (uint256)",
  //Transfer tokenId and balance from one holder to another
  "function _transfer(address from, address to, bytes32 tokenId) external"
];




function getLibrary(provider: any): Web3Provider{
  const library = new Web3Provider(provider)
  library.pollingInterval = 12000
  return library
}

export default function SubscriptionX(){
  return(
    <Web3ReactProvider getLibrary={getLibrary}>
      <App />
    </Web3ReactProvider>
  )
}

function App() {
  const context = useWeb3React<Web3Provider>()
  const {active, error, library, account} = context
  const [modalView, setModalView] = useState(false);
  const [hasSubX, setHasSubX] = useState(false);
  const subXContract = new ethers.Contract(_subXContractAddress, abiSubx, library);


  
  const showModal = () =>{
    setModalView(true);
  }
  const handleClose = () => {
    setModalView(false);
  }

  useEffect(()=>{
    if(active){
    subXContract.balanceOf(account).then((subXBal)=>{
      if (subXBal.toNumber() > 0) {setHasSubX(true)}
      else{setHasSubX(false)};
    }).catch(error=>console.error(error));
  }else{setHasSubX(false)};
  },[active, library, modalView, account]);

  return (
      <div className={styles.container}>
        <Head>
          <title>SubscriptionX</title>
        <meta name="description" content="Generated by create next app" />
          <link rel="icon" href="/favicon.ico" />
        </Head>
        <button className={styles.connectButton} onClick={showModal} >Connect {active ? 'ðŸŸ¢' : error ? 'ðŸ”´' : 'ðŸŸ '}</button>

        {(hasSubX === true) && <div style={{display: 'grid', gridTemplate: 'column', justifyContent: 'center', marginTop: '35vh'}}><iframe width="560" height="315" src="https://www.youtube.com/embed/sIWTp6EK4J4" title="YouTube video player" frameBorder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowFullScreen></iframe></div>}

        <SubPortal show={modalView} handleClose={handleClose}/> 
      </div>
)}
